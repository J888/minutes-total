{"version":3,"sources":["helpers/TimeValidation.js","components/MinutesTotalForm/MinutesInput.js","components/MinutesTotalForm/MinutesTotalForm.js","App.js","serviceWorker.js","index.js"],"names":["SECONDS_IN_MINUTE","SECONDS_IN_HOUR","isValidTimeInMinutes","testThis","test","MinutesInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","handleChange","bind","assertThisInitialized","event","inputString","target","replace","searchColon","match","invalid","length","hadInvalidChars","setState","slice","TimeValidators","MAX_STRING_LENGTH","onChange","index","react_default","a","createElement","className","type","Component","MinutesInputForm","inputs","total","addInputs","updateTotal","recalculateTotal","resetAll","concat","toConsumableArray","newValue","whichMinutesInput","_this2","currentInputs","currentMinutesInput","difference","minutes","splitResult","split","parseInt","newTotal","i","_this3","id","seconds","secString","minString","hourString","remaining","precedingZeroSeconds","Math","floor","toString","onClick","map","MinutesTotalForm_MinutesInput","key","App","MinutesTotalForm","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb69d9c6.chunk.js","sourcesContent":["const SECONDS_IN_MINUTE = 60;\nconst SECONDS_IN_HOUR = 3600;\n\nexport function isValidTimeInMinutes(testThis) { return(/^[0-5]?[0-9]:[0-5][0-9]$/.test(testThis)); }\n\nexport function minutesToSeconds(minutes) {\n  var splitResult = minutes.split(':');\n  return( parseInt(splitResult[0]) * SECONDS_IN_MINUTE + parseInt(splitResult[1]) )\n}\n\nexport function secondsToTime(seconds) {\n  var secString, minString, hourString, remaining, precedingZeroSeconds, precedingZeroMinutes;\n\n  if(seconds < SECONDS_IN_MINUTE) {\n    precedingZeroSeconds = seconds < 10 ? '00:0' : '00:';\n    return(precedingZeroSeconds + seconds);\n\n  } else if(seconds < SECONDS_IN_HOUR) { // time is in minutes (and seconds)\n    minString = Math.floor(seconds/SECONDS_IN_MINUTE).toString();\n    secString = (seconds % SECONDS_IN_MINUTE).toString();\n    precedingZeroSeconds = secString.length < 2 ? '0' : '';\n    return(minString + ':' + precedingZeroSeconds + secString);\n\n  } else {\n    hourString = Math.floor(seconds / SECONDS_IN_HOUR).toString();\n    remaining = (seconds % SECONDS_IN_HOUR);\n    minString = Math.floor(remaining / SECONDS_IN_MINUTE).toString();\n    secString = (remaining % SECONDS_IN_MINUTE).toString();\n    precedingZeroSeconds = secString.length < 2 ? '0' : '';\n    precedingZeroMinutes = minString.length < 2 ? '0' : ''; \n    return(hourString + ':' + precedingZeroMinutes + minString + ':' + precedingZeroSeconds + secString);\n  }\n}","import React, { Component } from 'react';\nimport * as TimeValidators from '../../helpers/TimeValidation.js'\n\nconst MAX_STRING_LENGTH = 5;\n\nclass MinutesInput extends Component {\n\tconstructor(props) {\n\t    super(props);\n\t    this.state = {value: ''};\n\t    this.handleChange = this.handleChange.bind(this);\n  \t}\n\n  \thandleChange(event) {\n  \t\tvar inputString = event.target.value.replace(/ /g, '').replace(/[!-/;-z]/g, '');\n  \t\tvar searchColon = inputString.match(/:/g) || ''; \n  \t\tvar invalid = ( searchColon && searchColon.length > 1 ) || false;\n  \t\tvar hadInvalidChars = / /.test(inputString) || /[!-/;-z]/.test(inputString);\n  \t\tvar overMaxLength = ( inputString[1] === ':' && inputString.length > 4 ) ||\n  \t\t\t\t\t\t\t( inputString[2] === ':' && inputString.length > 5 );\n  \t\t\n  \t\tif(invalid) { //invalid, clear the input\n  \t\t\tthis.setState({ value: '' });\n\n  \t\t} else if( inputString[1] === ':' && inputString.length > 4 ) { // format m:ss1\n  \t\t\tinputString = inputString.slice(0, 4);\n\n  \t\t} else if( inputString[2] === ':' && inputString.length > 5 ) { //format mm:ss1\n  \t\t\tinputString = inputString.slice(0, 5);\n\n  \t\t} else if(inputString.length === 4 && !searchColon) { // 4 numbers entered with no :, assume mm:ss\n  \t\t\tinputString = inputString.slice(0, 2) + ':' + inputString.slice(2);\n\n  \t\t} else if(inputString.length > 4 && !TimeValidators.isValidTimeInMinutes(inputString)) {\n  \t\t\tthis.setState({ value: '' });\n  \t\t\tinvalid = true;\n  \t\t}\n\n  \t\tif(!invalid) {\n\n  \t\t\tif(inputString.length > 4 && !TimeValidators.isValidTimeInMinutes(inputString)) { //not a valid time\n  \t\t\t\tthis.setState({ value: '' });\n  \t\t\t\treturn;\n\n  \t\t\t} else if(inputString > MAX_STRING_LENGTH) { // string is too long\n\t  \t\t\tthis.setState({ value: inputString.slice(0, MAX_STRING_LENGTH + 1) });\n\t  \t\t\treturn;\n\n\t  \t\t} else {\n\t  \t\t\tthis.setState({ value: inputString });\n\t  \t\t}\n\t  \t\t\n\t  \t\tif( !hadInvalidChars ) { // only add this time to the total if there were not invalid chars\n\t  \t\t\tthis.props.onChange(inputString, this.props.index);\n\t  \t\t}\n\t  \t}\n  \t}\n\n\trender() {\n\t\treturn (\n\t\n\t\t<div className=\"input-container\">\n\t\t\t<input className = \"MinutesInput\" type=\"text\" value={this.state.value} onChange={this.handleChange} />\n\t\t</div>\n\t\t\n\t\t);\n\t}\n}\n\nexport default MinutesInput;","import React, { Component } from 'react';\nimport MinutesInput from './MinutesInput.js';\nimport * as TimeValidators from '../../helpers/TimeValidation.js'\n\nclass MinutesInputForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      inputs: [0],\n      total: 0\n    };\n\n    this.addInputs = this.addInputs.bind(this);\n    this.updateTotal = this.updateTotal.bind(this);\n    this.recalculateTotal = this.recalculateTotal.bind(this);\n    this.resetAll = this.resetAll.bind(this);\n  }\n\n  addInputs() { this.setState({ inputs: [...this.state.inputs, 0] }); }\n\n  updateTotal(newValue, whichMinutesInput) {\n    var currentInputs = this.state.inputs;\n    var currentMinutesInput = this.state.inputs[whichMinutesInput];\n\n    newValue = newValue === '' ? '00:00' : newValue;\n\n    if(TimeValidators.isValidTimeInMinutes(newValue)) {\n      var inputInSeconds, difference;\n\n      inputInSeconds = TimeValidators.minutesToSeconds(newValue); // convert the new input value to seconds  \n\n      if( (difference = inputInSeconds - currentMinutesInput) === 0 ) { // return if the value has not been changed\n        return;\n      } \n\n      currentInputs[whichMinutesInput] = currentMinutesInput + difference; // add/subtract) to/from current input\n \n      this.setState(\n        {inputs: currentInputs},\n        () => this.setState({ total: this.recalculateTotal() })\n      );\n    }\n  }\n\n  recalculateTotal() {\n    var newTotal = 0;\n    for (var i = 0; i < this.state.inputs.length ; i++) {\n      newTotal += this.state.inputs[i];\n    }\n    return(newTotal);\n  }\n\n  resetAll() {\n    this.setState({ inputs: [], total: 0 })\n  }\n\n  render() {\n    return (\n      <div className = \"MinutesInputForm\" >\n        <h2 id=\"total-time-number\">Total: {TimeValidators.secondsToTime(this.state.total)}</h2>\n        <button id=\"remove-all-times-button\" onClick={this.resetAll}>Reset</button>\n        {\n          this.state.inputs.map((id, index) =>\n            <MinutesInput key={index} index={index} onChange={this.updateTotal}/>\n          )\n        }\n        <button id=\"add-times-button\" onClick={this.addInputs}>+</button>\n      </div>\n    );\n  }\n}\n\nexport default MinutesInputForm;","import React, { Component } from 'react';\nimport './App.css';\nimport MinutesTotalForm from './components/MinutesTotalForm/MinutesTotalForm.js'\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"App\">\n          <h1 id=\"app-title\">Add Minutes Together</h1>\n          <MinutesTotalForm/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}